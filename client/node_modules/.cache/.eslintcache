[{"/home/divum/Documents/register/client/src/index.js":"1","/home/divum/Documents/register/client/src/App.js":"2","/home/divum/Documents/register/client/src/reportWebVitals.js":"3","/home/divum/Documents/register/client/src/components/Records.js":"4","/home/divum/Documents/register/client/src/components/AddUser.js":"5","/home/divum/Documents/register/client/src/components/UpdateUser.js":"6","/home/divum/Documents/register/client/src/ValidateForm.js":"7","/home/divum/Documents/register/client/src/components/valid.js":"8","/home/divum/Documents/register/client/src/components/setError.js":"9","/home/divum/Documents/register/client/src/components/setSuccess.js":"10"},{"size":535,"mtime":1693669776840,"results":"11","hashOfConfig":"12"},{"size":611,"mtime":1693934647407,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1693669776840,"results":"14","hashOfConfig":"12"},{"size":2731,"mtime":1694102494359,"results":"15","hashOfConfig":"12"},{"size":6823,"mtime":1694149267550,"results":"16","hashOfConfig":"12"},{"size":6505,"mtime":1694089765640,"results":"17","hashOfConfig":"12"},{"size":2370,"mtime":1694089816555,"results":"18","hashOfConfig":"12"},{"size":514,"mtime":1694089744864,"results":"19","hashOfConfig":"12"},{"size":329,"mtime":1694068872172,"results":"20","hashOfConfig":"12"},{"size":283,"mtime":1694069010679,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"1d8x0l4",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"25"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"25"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"/home/divum/Documents/register/client/src/index.js",[],[],[],"/home/divum/Documents/register/client/src/App.js",[],[],"/home/divum/Documents/register/client/src/reportWebVitals.js",[],[],"/home/divum/Documents/register/client/src/components/Records.js",[],[],"/home/divum/Documents/register/client/src/components/AddUser.js",[],[],"/home/divum/Documents/register/client/src/components/UpdateUser.js",["56"],[],"import logo from \"../images/divumlogo.png\";\nimport { useState,useEffect } from \"react\";\nimport { Link, useParams ,useNavigate} from \"react-router-dom\";\nimport axios from \"axios\";\nimport formValidate from \"../ValidateForm\";\nimport valid from \"./valid\";\nimport setError from \"./setError\";\n\nfunction UpdateUser() {\n  const { id } = useParams();\n  const [email, setEmail] = useState(\"\");\n  const [firstname, setFirstname] = useState(\"\");\n  const [lastname, setLastname] = useState(\"\");\n  const [mobile_no, setMobile_no] = useState(\"\");\n  const [dob, setDob] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:3002/getUsers/\" + id)\n      .then((result) => {\n        console.log(result);\n        setEmail(result.data.email);\n        setFirstname(result.data.firstname);\n        setLastname(result.data.lastname);\n        setMobile_no(result.data.mobile_no);\n        setDob(result.data.dob.slice(0, 10));\n        setAddress(result.data.address);\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  const handleOnUpdate = async (e) => {\n    e.preventDefault();\n\n    if (valid()) {\n      let result = await fetch(\"http://localhost:3002/updateUser/\" + id, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          email,\n          firstname,\n          lastname,\n          mobile_no,\n          dob,\n          address,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      try {\n        result = await result.json();\n        console.warn(result);\n        if (result) {\n          alert(\"Data Updated succesfully\");\n          setEmail(\"\");\n          setFirstname(\"\");\n          setLastname(\"\");\n          setMobile_no(\"\");\n          setDob(\"\");\n          setAddress(\"\");\n        }\n        navigate(\"/getUsers\");\n      } catch (error) {\n        let field = document.getElementById(\"email\");\n        setError(field, \"*Email address already exists\");\n        console.log(error, result);\n      }\n    }\n  };\n  return (\n    <>\n      <div className=\"logo \">\n        <img src={logo} alt=\"logo\" className=\"logo\" />\n      </div>\n      <section>\n        <div className=\"container\">\n          <form id=\"form\">\n            <div className=\"row100\">\n              <div className=\"col\">\n                <div className=\"inputBox error\">\n                  <input\n                    type=\"text\"\n                    value={firstname}\n                    id=\"fname\"\n                    name=\"fname\"\n                    onChange={(e) => setFirstname(e.target.value)}\n                    onBlur={(e) => formValidate(e.target.id)}\n                  />\n                  <span className=\"text\">First Name</span>\n                  <span className=\"line\"></span>\n                  <div className=\"errormsg\"></div>\n                </div>\n              </div>\n              <div className=\"col\">\n                <div className=\"inputBox\">\n                  <input\n                    type=\"text\"\n                    value={lastname}\n                    id=\"lname\"\n                    name=\"lname\"\n                    onChange={(e) => setLastname(e.target.value)}\n                    onBlur={(e) => formValidate(e.target.id)}\n                  />\n                  <span className=\"text\">Last Name</span>\n                  <span className=\"line\"></span>\n                  <div className=\"errormsg\"></div>\n                </div>\n              </div>\n            </div>\n            <div className=\"row100\">\n              <div className=\"col\">\n                <div className=\"inputBox\">\n                  <input\n                    type=\"email\"\n                    value={email}\n                    id=\"email\"\n                    name=\"email\"\n                    onChange={(e) => setEmail(e.target.value)}\n                    onBlur={(e) => formValidate(e.target.id)}\n                  />\n                  <span className=\"text\">Email</span>\n                  <span className=\"line\"></span>\n                  <div className=\"errormsg\"></div>\n                </div>\n              </div>\n              <div className=\"col\">\n                <div className=\"inputBox\">\n                  <input\n                    type=\"date\"\n                    value={dob}\n                    id=\"dob\"\n                    name=\"dob\"\n                    onChange={(e) => setDob(e.target.value)}\n                    onBlur={(e) => formValidate(e.target.id)}\n                    max={new Date().toISOString().split(\"T\")[0]}\n                  />\n                  <span className=\"text\">Date Of Birth</span>\n                  <span className=\"line\"></span>\n                  <div className=\"errormsg\"></div>\n                </div>\n              </div>\n              <div className=\"col\">\n                <div className=\"inputBox\">\n                  <input\n                    type=\"text\"\n                    value={mobile_no}\n                    id=\"mobile\"\n                    name=\"mobile\"\n                    onChange={(e) => setMobile_no(e.target.value)}\n                    onBlur={(e) => formValidate(e.target.id)}\n                    maxLength=\"10\"\n                  />\n                  <span className=\"text\">Mobile</span>\n                  <span className=\"line\"></span>\n                  <div className=\"errormsg\"></div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"row100\">\n              <div className=\"col\">\n                <div className=\"inputBox textarea\">\n                  <textarea\n                    value={address}\n                    id=\"address\"\n                    name=\"address\"\n                    maxLength=\"50\"\n                    onBlur={(e) => formValidate(e.target.id)}\n                    onChange={(e) => setAddress(e.target.value)}\n                  ></textarea>\n                  <span className=\"text\">Address...</span>\n                  <span className=\"line\"></span>\n                  <div className=\"errormsg\"></div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"row100\">\n              <div className=\"col\">\n                <Link to=\"/getUsers\">\n                  <input\n                    type=\"submit\"\n                    value=\"Update\"\n                    onClick={handleOnUpdate}\n                  />\n                </Link>\n              </div>\n            </div>\n          </form>\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default UpdateUser;\n","/home/divum/Documents/register/client/src/ValidateForm.js",["57","58"],[],"import setError from \"./components/setError\";\nimport setSuccess from \"./components/setSuccess\"\n\nconst formValidate = async (id) => {\n\n    const elementName = id;\n    const field = document.querySelector(`#${elementName}`);\n\n    //regex constants\n    const alphaExp = /^[a-zA-Z]+$/;\n    const exp = /^[0-9]+$/;\n    const addressExp = /^[a-zA-Z0-9-/]+$/;\n    const emailExp = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n    \n    switch (elementName) {\n\n      case 'fname':\n\n        // console.log(field);\n        if (field.value === '') {\n          setError(field, '*FirstName is required')\n        }\n        else if (!field.value.match(alphaExp)) {\n          setError(field, \"*Enter only Aphabets\")\n        }\n        else {\n          setSuccess(field)\n        }\n\n        break;\n      case 'lname':\n        if (field.value === '') {\n          setError(field, '*LastName is required')\n        }\n        else if (!field.value.match(alphaExp)) {\n          setError(field, \"*Enter only Aphabets\")\n        }\n        else {\n          setSuccess(field)\n        }\n        break;\n      case 'mobile':\n        if (field.value === '') {\n          setError(field, '*Mobile Number is required')\n        }\n        else if (!field.value.match(exp)) {\n          setError(field, '*Enter only Numbers')\n        }\n        else if (field.value.length < 10) {\n          setError(field, '*Enter a Valid Number')\n        }\n        else {\n          setSuccess(field)\n        }\n        break;\n      case 'email':\n        if (field.value === '') {\n          setError(field, '*Email is required')\n        }\n        else if (!field.value.match(emailExp)) {\n          setError(field, \"*Enter a Valid Email\")\n        }\n        else {\n          setSuccess(field)\n        }\n        break;\n      case 'dob':\n        if (field.value === '') {\n          setError(field, '*Date is required')\n        }\n        else {\n          setSuccess(field)\n        }\n        break;\n      case 'address':\n        if (field.value === '') {\n          setError(field, '*Address is required')\n          \n        }\n        else if (!field.value.match(addressExp)) {\n          setError(field, '*Enter a Valid Address')\n          \n        }\n        else {\n          setSuccess(field)\n         \n        }\n        \n        break;\n\n      default:\n        alert(\"error\");\n\n    }\n   \n\n  };\n\n \n\nexport default formValidate;\n\n  \n","/home/divum/Documents/register/client/src/components/valid.js",["59","60","61","62"],[],"import formValidate from \"../ValidateForm\";\n\nconst valid = () => {\n  const dataError = document.querySelectorAll(\".error\");\n  const dataSuccess = document.querySelectorAll(\".success\");\n  const inputFields = [\"fname\", \"lname\", \"mobile\", \"dob\", \"email\", \"address\"];\n\n  if (dataError.length == 0 && dataSuccess.length == 6) {\n    console.log(dataSuccess);\n    return true;\n  } else {\n    {\n      inputFields.map((index) => {\n        formValidate(index);\n      });\n    }\n  }\n\n  return false;\n};\n\nexport default valid;\n","/home/divum/Documents/register/client/src/components/setError.js",[],[],"/home/divum/Documents/register/client/src/components/setSuccess.js",[],[],{"ruleId":"63","severity":1,"message":"64","line":33,"column":6,"nodeType":"65","endLine":33,"endColumn":8,"suggestions":"66"},{"ruleId":"67","severity":1,"message":"68","line":13,"column":29,"nodeType":"69","messageId":"70","endLine":13,"endColumn":30,"suggestions":"71"},{"ruleId":"67","severity":1,"message":"68","line":13,"column":45,"nodeType":"69","messageId":"70","endLine":13,"endColumn":46,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":8,"column":24,"nodeType":"75","messageId":"76","endLine":8,"endColumn":26},{"ruleId":"73","severity":1,"message":"74","line":8,"column":51,"nodeType":"75","messageId":"76","endLine":8,"endColumn":53},{"ruleId":"77","severity":1,"message":"78","line":12,"column":5,"nodeType":"79","messageId":"80","endLine":16,"endColumn":6},{"ruleId":"81","severity":1,"message":"82","line":13,"column":31,"nodeType":"83","messageId":"84","endLine":13,"endColumn":33},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["85"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["86","87"],["88","89"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",{"desc":"90","fix":"91"},{"messageId":"92","fix":"93","desc":"94"},{"messageId":"95","fix":"96","desc":"97"},{"messageId":"92","fix":"98","desc":"94"},{"messageId":"95","fix":"99","desc":"97"},"Update the dependencies array to be: [id]",{"range":"100","text":"101"},"removeEscape",{"range":"102","text":"103"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"104","text":"105"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"106","text":"103"},{"range":"107","text":"105"},[1100,1102],"[id]",[381,382],"",[381,381],"\\",[397,398],[397,397]]