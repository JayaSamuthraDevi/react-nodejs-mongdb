{"ast":null,"code":"import validator from \"validator\";\nimport setError from \"./setError\";\nimport setSuccess from \"./setSuccess\";\nconst formValidate = async id => {\n  const elementName = id;\n  const field = document.querySelector(`#${elementName}`);\n\n  //regex constants\n  const alphaExp = /^[a-zA-Z]+$/;\n  const exp = /^[0-9]+$/;\n  const addressExp = /^[a-zA-Z0-9-/]+$/;\n  const emailExp = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  switch (elementName) {\n    case 'fname':\n      // console.log(field);\n      if (field.value === '') {\n        setError(field, '*FirstName is required');\n      } else if (!field.value.match(alphaExp)) {\n        setError(field, \"*Enter only Aphabets\");\n      } else {\n        setSuccess(field);\n      }\n      break;\n    case 'lname':\n      if (field.value === '') {\n        setError(field, '*LastName is required');\n      } else if (!field.value.match(alphaExp)) {\n        setError(field, \"*Enter only Aphabets\");\n      } else {\n        setSuccess(field);\n      }\n      break;\n    case 'mobile':\n      if (field.value === '') {\n        setError(field, '*Mobile Number is required');\n      } else if (!field.value.match(exp)) {\n        setError(field, '*Enter only Numbers');\n      } else if (field.value.length < 10) {\n        setError(field, '*Enter a Valid Number');\n      } else {\n        setSuccess(field);\n      }\n      break;\n    case 'email':\n      if (field.value === '') {\n        setError(field, '*Email is required');\n      } else if (!field.value.match(emailExp)) {\n        setError(field, \"*Enter a Valid Email\");\n      } else {\n        setSuccess(field);\n      }\n      break;\n    case 'dob':\n      if (field.value === '') {\n        setError(field, '*Date is required');\n      } else {\n        setSuccess(field);\n      }\n      break;\n    case 'address':\n      if (field.value === '') {\n        setError(field, '*Address is required');\n      } else if (!field.value.match(addressExp)) {\n        setError(field, '*Enter a Valid Address');\n      } else {\n        setSuccess(field);\n      }\n      break;\n    default:\n      alert(\"error\");\n  }\n};\nexport default formValidate;","map":{"version":3,"names":["validator","setError","setSuccess","formValidate","id","elementName","field","document","querySelector","alphaExp","exp","addressExp","emailExp","value","match","length","alert"],"sources":["/home/divum/Documents/register/client/src/ValidateForm.js"],"sourcesContent":["import validator from \"validator\";\nimport setError from \"./setError\";\nimport setSuccess from \"./setSuccess\"\n\nconst formValidate = async (id) => {\n\n    const elementName = id;\n    const field = document.querySelector(`#${elementName}`);\n\n    //regex constants\n    const alphaExp = /^[a-zA-Z]+$/;\n    const exp = /^[0-9]+$/;\n    const addressExp = /^[a-zA-Z0-9-/]+$/;\n    const emailExp = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n    \n    switch (elementName) {\n\n      case 'fname':\n\n        // console.log(field);\n        if (field.value === '') {\n          setError(field, '*FirstName is required')\n        }\n        else if (!field.value.match(alphaExp)) {\n          setError(field, \"*Enter only Aphabets\")\n        }\n        else {\n          setSuccess(field)\n        }\n\n        break;\n      case 'lname':\n        if (field.value === '') {\n          setError(field, '*LastName is required')\n        }\n        else if (!field.value.match(alphaExp)) {\n          setError(field, \"*Enter only Aphabets\")\n        }\n        else {\n          setSuccess(field)\n        }\n        break;\n      case 'mobile':\n        if (field.value === '') {\n          setError(field, '*Mobile Number is required')\n        }\n        else if (!field.value.match(exp)) {\n          setError(field, '*Enter only Numbers')\n        }\n        else if (field.value.length < 10) {\n          setError(field, '*Enter a Valid Number')\n        }\n        else {\n          setSuccess(field)\n        }\n        break;\n      case 'email':\n        if (field.value === '') {\n          setError(field, '*Email is required')\n        }\n        else if (!field.value.match(emailExp)) {\n          setError(field, \"*Enter a Valid Email\")\n        }\n        else {\n          setSuccess(field)\n        }\n        break;\n      case 'dob':\n        if (field.value === '') {\n          setError(field, '*Date is required')\n        }\n        else {\n          setSuccess(field)\n        }\n        break;\n      case 'address':\n        if (field.value === '') {\n          setError(field, '*Address is required')\n          \n        }\n        else if (!field.value.match(addressExp)) {\n          setError(field, '*Enter a Valid Address')\n          \n        }\n        else {\n          setSuccess(field)\n         \n        }\n        \n        break;\n\n      default:\n        alert(\"error\");\n\n    }\n   \n\n  };\n\n \n\nexport default formValidate;\n\n  \n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,WAAW;AACjC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,UAAU,MAAM,cAAc;AAErC,MAAMC,YAAY,GAAG,MAAOC,EAAE,IAAK;EAE/B,MAAMC,WAAW,GAAGD,EAAE;EACtB,MAAME,KAAK,GAAGC,QAAQ,CAACC,aAAa,CAAE,IAAGH,WAAY,EAAC,CAAC;;EAEvD;EACA,MAAMI,QAAQ,GAAG,aAAa;EAC9B,MAAMC,GAAG,GAAG,UAAU;EACtB,MAAMC,UAAU,GAAG,kBAAkB;EACrC,MAAMC,QAAQ,GAAG,+CAA+C;EAGhE,QAAQP,WAAW;IAEjB,KAAK,OAAO;MAEV;MACA,IAAIC,KAAK,CAACO,KAAK,KAAK,EAAE,EAAE;QACtBZ,QAAQ,CAACK,KAAK,EAAE,wBAAwB,CAAC;MAC3C,CAAC,MACI,IAAI,CAACA,KAAK,CAACO,KAAK,CAACC,KAAK,CAACL,QAAQ,CAAC,EAAE;QACrCR,QAAQ,CAACK,KAAK,EAAE,sBAAsB,CAAC;MACzC,CAAC,MACI;QACHJ,UAAU,CAACI,KAAK,CAAC;MACnB;MAEA;IACF,KAAK,OAAO;MACV,IAAIA,KAAK,CAACO,KAAK,KAAK,EAAE,EAAE;QACtBZ,QAAQ,CAACK,KAAK,EAAE,uBAAuB,CAAC;MAC1C,CAAC,MACI,IAAI,CAACA,KAAK,CAACO,KAAK,CAACC,KAAK,CAACL,QAAQ,CAAC,EAAE;QACrCR,QAAQ,CAACK,KAAK,EAAE,sBAAsB,CAAC;MACzC,CAAC,MACI;QACHJ,UAAU,CAACI,KAAK,CAAC;MACnB;MACA;IACF,KAAK,QAAQ;MACX,IAAIA,KAAK,CAACO,KAAK,KAAK,EAAE,EAAE;QACtBZ,QAAQ,CAACK,KAAK,EAAE,4BAA4B,CAAC;MAC/C,CAAC,MACI,IAAI,CAACA,KAAK,CAACO,KAAK,CAACC,KAAK,CAACJ,GAAG,CAAC,EAAE;QAChCT,QAAQ,CAACK,KAAK,EAAE,qBAAqB,CAAC;MACxC,CAAC,MACI,IAAIA,KAAK,CAACO,KAAK,CAACE,MAAM,GAAG,EAAE,EAAE;QAChCd,QAAQ,CAACK,KAAK,EAAE,uBAAuB,CAAC;MAC1C,CAAC,MACI;QACHJ,UAAU,CAACI,KAAK,CAAC;MACnB;MACA;IACF,KAAK,OAAO;MACV,IAAIA,KAAK,CAACO,KAAK,KAAK,EAAE,EAAE;QACtBZ,QAAQ,CAACK,KAAK,EAAE,oBAAoB,CAAC;MACvC,CAAC,MACI,IAAI,CAACA,KAAK,CAACO,KAAK,CAACC,KAAK,CAACF,QAAQ,CAAC,EAAE;QACrCX,QAAQ,CAACK,KAAK,EAAE,sBAAsB,CAAC;MACzC,CAAC,MACI;QACHJ,UAAU,CAACI,KAAK,CAAC;MACnB;MACA;IACF,KAAK,KAAK;MACR,IAAIA,KAAK,CAACO,KAAK,KAAK,EAAE,EAAE;QACtBZ,QAAQ,CAACK,KAAK,EAAE,mBAAmB,CAAC;MACtC,CAAC,MACI;QACHJ,UAAU,CAACI,KAAK,CAAC;MACnB;MACA;IACF,KAAK,SAAS;MACZ,IAAIA,KAAK,CAACO,KAAK,KAAK,EAAE,EAAE;QACtBZ,QAAQ,CAACK,KAAK,EAAE,sBAAsB,CAAC;MAEzC,CAAC,MACI,IAAI,CAACA,KAAK,CAACO,KAAK,CAACC,KAAK,CAACH,UAAU,CAAC,EAAE;QACvCV,QAAQ,CAACK,KAAK,EAAE,wBAAwB,CAAC;MAE3C,CAAC,MACI;QACHJ,UAAU,CAACI,KAAK,CAAC;MAEnB;MAEA;IAEF;MACEU,KAAK,CAAC,OAAO,CAAC;EAElB;AAGF,CAAC;AAIH,eAAeb,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}