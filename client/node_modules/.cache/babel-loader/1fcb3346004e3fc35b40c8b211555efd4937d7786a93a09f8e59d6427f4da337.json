{"ast":null,"code":"import validator from \"validator\";\nconst formValidate = async id => {\n  const elementName = id;\n  const field = document.querySelector(`#${elementName}`);\n\n  //regex constants\n  const alphaExp = /^[a-zA-Z]+$/;\n  const exp = /^[0-9]+$/;\n  const addressExp = /^[a-zA-Z0-9-/]+$/;\n  const emailExp = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  let success = false;\n  let fsuccess, lsucc;\n  switch (elementName) {\n    case 'fname':\n      // console.log(field);\n      if (field.value === '') {\n        setError(field, '*FirstName is required');\n        fsuccess = false;\n      } else if (!field.value.match(alphaExp)) {\n        setError(field, \"*Enter only Aphabets\");\n        fsuccess = false;\n      } else {\n        setSuccess(field);\n        fsuccess = true;\n      }\n      break;\n    case 'lname':\n      if (field.value === '') {\n        setError(field, '*LastName is required');\n        success = false;\n      } else if (!field.value.match(alphaExp)) {\n        setError(field, \"*Enter only Aphabets\");\n        success = false;\n      } else {\n        setSuccess(field);\n        success = true;\n      }\n      break;\n    case 'mobile':\n      if (field.value === '') {\n        setError(field, '*Mobile Number is required');\n        success = false;\n      } else if (!field.value.match(exp)) {\n        setError(field, '*Enter only Numbers');\n        success = false;\n      } else if (field.value.length < 10) {\n        setError(field, '*Enter a Valid Number');\n        success = false;\n      } else {\n        setSuccess(field);\n        success = true;\n      }\n      break;\n    case 'email':\n      if (field.value === '') {\n        setError(field, '*Email is required');\n        success = false;\n      } else if (!field.value.match(emailExp)) {\n        setError(field, \"*Enter a Valid Email\");\n        success = false;\n      } else {\n        setSuccess(field);\n        success = true;\n      }\n      break;\n    case 'dob':\n      const currentDate = new Date();\n      const day = currentDate.getDate();\n      console.log(day, \"_-------------\", currentDate, field.value);\n      if (field.value === '') {\n        setError(field, '*Date is required');\n        success = false;\n      } else if (validator.isDate(field.value) && field.value < currentDate) {\n        setError(field, 'Enter a Valid Date');\n        success = false;\n      } else {\n        setSuccess(field);\n        success = true;\n      }\n      break;\n    case 'address':\n      if (field.value === '') {\n        setError(field, '*Address is required');\n        success = false;\n      } else if (!field.value.match(addressExp)) {\n        setError(field, '*Enter a Valid Address');\n        success = false;\n      } else {\n        setSuccess(field);\n        success = true;\n      }\n      break;\n    default:\n      alert(\"error\");\n  }\n  return success;\n};\nconst setError = (field, msg) => {\n  const inputGroup = field.parentElement;\n  const errorElement = inputGroup.querySelector('.errormsg');\n  errorElement.innerText = msg;\n};\n//setting success \nfunction setSuccess(field) {\n  const inputGroup = field.parentElement;\n  const errorElement = inputGroup.querySelector('.errormsg');\n  errorElement.innerText = '';\n}\nexport default formValidate;","map":{"version":3,"names":["validator","formValidate","id","elementName","field","document","querySelector","alphaExp","exp","addressExp","emailExp","success","fsuccess","lsucc","value","setError","match","setSuccess","length","currentDate","Date","day","getDate","console","log","isDate","alert","msg","inputGroup","parentElement","errorElement","innerText"],"sources":["/home/divum/Documents/register/client/src/ValidateForm.js"],"sourcesContent":["import validator from \"validator\";\n\nconst formValidate = async (id) => {\n\n    const elementName = id;\n    const field = document.querySelector(`#${elementName}`);\n\n    //regex constants\n    const alphaExp = /^[a-zA-Z]+$/;\n    const exp = /^[0-9]+$/;\n    const addressExp = /^[a-zA-Z0-9-/]+$/;\n    const emailExp = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n    let success=false;\n    let fsuccess,lsucc\n\n    switch (elementName) {\n\n      case 'fname':\n\n        // console.log(field);\n        if (field.value === '') {\n          setError(field, '*FirstName is required')\n          fsuccess=false;\n        }\n        else if (!field.value.match(alphaExp)) {\n          setError(field, \"*Enter only Aphabets\")\n          fsuccess=false;\n        }\n        else {\n          setSuccess(field)\n          fsuccess=true;\n        }\n        break;\n      case 'lname':\n        if (field.value === '') {\n          setError(field, '*LastName is required')\n          success=false;\n        }\n        else if (!field.value.match(alphaExp)) {\n          setError(field, \"*Enter only Aphabets\")\n          success=false;\n        }\n        else {\n          setSuccess(field)\n          success=true;\n        }\n        break;\n      case 'mobile':\n        if (field.value === '') {\n          setError(field, '*Mobile Number is required')\n          success=false;\n        }\n        else if (!field.value.match(exp)) {\n          setError(field, '*Enter only Numbers')\n          success=false;\n        }\n        else if (field.value.length < 10) {\n          setError(field, '*Enter a Valid Number')\n          success=false;\n        }\n        else {\n          setSuccess(field)\n          success=true;\n        }\n        break;\n      case 'email':\n        if (field.value === '') {\n          setError(field, '*Email is required')\n          success=false;\n        }\n        else if (!field.value.match(emailExp)) {\n          setError(field, \"*Enter a Valid Email\")\n          success=false;\n        }\n        else {\n          setSuccess(field)\n          success=true;\n        }\n        break;\n      case 'dob':\n        const currentDate = new Date();\n        const day = currentDate.getDate();\n        console.log(day, \"_-------------\", currentDate, field.value)\n        if (field.value === '') {\n          setError(field, '*Date is required')\n          success=false;\n        }\n        else if (validator.isDate(field.value) && (field.value < currentDate)) {\n          setError(field, 'Enter a Valid Date');\n          success=false;\n        }\n        else {\n          setSuccess(field)\n          success=true;\n        }\n        break;\n      case 'address':\n        if (field.value === '') {\n          setError(field, '*Address is required')\n          success=false;\n        }\n        else if (!field.value.match(addressExp)) {\n          setError(field, '*Enter a Valid Address')\n          success=false;\n        }\n        else {\n          setSuccess(field)\n          success=true;\n        }\n        \n        break;\n\n      default:\n        alert(\"error\");\n\n    }\n    return success;\n\n  };\n\n  const setError = (field, msg) => {\n    const inputGroup = field.parentElement;\n    const errorElement = inputGroup.querySelector('.errormsg')\n    errorElement.innerText = msg;\n\n  }\n  //setting success \n  function setSuccess(field) {\n    const inputGroup = field.parentElement;\n    const errorElement = inputGroup.querySelector('.errormsg')\n    errorElement.innerText = '';\n  }\nexport default formValidate;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}