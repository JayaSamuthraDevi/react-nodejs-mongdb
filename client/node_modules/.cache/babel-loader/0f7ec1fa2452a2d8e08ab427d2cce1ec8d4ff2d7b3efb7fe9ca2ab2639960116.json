{"ast":null,"code":"import validator from \"validator\";\nimport DatePicker from 'react-datetime';\nconst formValidate = async id => {\n  const elementName = id;\n  const field = document.querySelector(`#${elementName}`);\n\n  //regex constants\n  const alphaExp = /^[a-zA-Z]+$/;\n  const exp = /^[0-9]+$/;\n  const addressExp = /^[a-zA-Z0-9-/]+$/;\n  const emailExp = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  switch (elementName) {\n    case 'fname':\n      // console.log(field);\n      if (field.value === '') {\n        setError(field, '*FirstName is required');\n      } else if (!field.value.match(alphaExp)) {\n        setError(field, \"*Enter only Aphabets\");\n      } else {\n        setSuccess(field);\n      }\n      break;\n    case 'lname':\n      if (field.value === '') {\n        setError(field, '*LastName is required');\n      } else if (!field.value.match(alphaExp)) {\n        setError(field, \"*Enter only Aphabets\");\n      } else {\n        setSuccess(field);\n      }\n      break;\n    case 'mobile':\n      if (field.value === '') {\n        setError(field, '*Mobile Number is required');\n      } else if (!field.value.match(exp)) {\n        setError(field, '*Enter only Numbers');\n      } else if (field.value.length < 10) {\n        setError(field, '*Enter a Valid Number');\n      } else {\n        setSuccess(field);\n      }\n      break;\n    case 'email':\n      if (field.value === '') {\n        setError(field, '*Email is required');\n      } else if (!field.value.match(emailExp)) {\n        setError(field, \"*Enter a Valid Email\");\n      } else {\n        setSuccess(field);\n      }\n      break;\n    case 'dob':\n      const currentDate = new Date();\n      const day = currentDate.getDate();\n      console.log(day, \"_-------------\", currentDate, field.value);\n      if (field.value === '') {\n        setError(field, '*Date is required');\n      } else if (validator.isDate(field.value) && field.value < currentDate) {\n        setError(field, 'Enter a Valid Date');\n      } else {\n        setSuccess(field);\n      }\n      break;\n    case 'address':\n      if (field.value === '') {\n        setError(field, '*Address is required');\n      } else if (!field.value.match(addressExp)) {\n        setError(field, '*Enter a Valid Address');\n      } else {\n        setSuccess(field);\n      }\n      break;\n    default:\n      alert(\"error\");\n  }\n  return true;\n};\nconst setError = (field, msg) => {\n  const inputGroup = field.parentElement;\n  const errorElement = inputGroup.querySelector('.errormsg');\n  errorElement.innerText = msg;\n};\n//setting success \nfunction setSuccess(field) {\n  const inputGroup = field.parentElement;\n  const errorElement = inputGroup.querySelector('.errormsg');\n  errorElement.innerText = '';\n}\nexport default f;","map":{"version":3,"names":["validator","DatePicker","formValidate","id","elementName","field","document","querySelector","alphaExp","exp","addressExp","emailExp","value","setError","match","setSuccess","length","currentDate","Date","day","getDate","console","log","isDate","alert","msg","inputGroup","parentElement","errorElement","innerText","f"],"sources":["/home/divum/Documents/register/client/src/ValidateForm.js"],"sourcesContent":["import validator from \"validator\";\nimport DatePicker from 'react-datetime';\n\nconst formValidate = async (id) => {\n\n    const elementName = id;\n    const field = document.querySelector(`#${elementName}`);\n\n    //regex constants\n    const alphaExp = /^[a-zA-Z]+$/;\n    const exp = /^[0-9]+$/;\n    const addressExp = /^[a-zA-Z0-9-/]+$/;\n    const emailExp = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n    switch (elementName) {\n\n      case 'fname':\n\n        // console.log(field);\n        if (field.value === '') {\n          setError(field, '*FirstName is required')\n        }\n        else if (!field.value.match(alphaExp)) {\n          setError(field, \"*Enter only Aphabets\")\n        }\n        else {\n          setSuccess(field)\n        }\n        break;\n      case 'lname':\n        if (field.value === '') {\n          setError(field, '*LastName is required')\n        }\n        else if (!field.value.match(alphaExp)) {\n          setError(field, \"*Enter only Aphabets\")\n        }\n        else {\n          setSuccess(field)\n        }\n        break;\n      case 'mobile':\n        if (field.value === '') {\n          setError(field, '*Mobile Number is required')\n        }\n        else if (!field.value.match(exp)) {\n          setError(field, '*Enter only Numbers')\n        }\n        else if (field.value.length < 10) {\n          setError(field, '*Enter a Valid Number')\n        }\n        else {\n          setSuccess(field)\n        }\n        break;\n      case 'email':\n        if (field.value === '') {\n          setError(field, '*Email is required')\n        }\n        else if (!field.value.match(emailExp)) {\n          setError(field, \"*Enter a Valid Email\")\n        }\n        else {\n          setSuccess(field)\n        }\n        break;\n      case 'dob':\n        const currentDate = new Date();\n        const day = currentDate.getDate();\n        console.log(day, \"_-------------\", currentDate, field.value)\n        if (field.value === '') {\n          setError(field, '*Date is required')\n        }\n        else if (validator.isDate(field.value) && (field.value < currentDate)) {\n          setError(field, 'Enter a Valid Date');\n        }\n        else {\n          setSuccess(field)\n        }\n        break;\n      case 'address':\n        if (field.value === '') {\n          setError(field, '*Address is required')\n        }\n        else if (!field.value.match(addressExp)) {\n          setError(field, '*Enter a Valid Address')\n        }\n        else {\n          setSuccess(field)\n        }\n        break;\n\n      default:\n        alert(\"error\");\n\n    }\n    return true;\n\n  };\n\n  const setError = (field, msg) => {\n    const inputGroup = field.parentElement;\n    const errorElement = inputGroup.querySelector('.errormsg')\n    errorElement.innerText = msg;\n\n  }\n  //setting success \n  function setSuccess(field) {\n    const inputGroup = field.parentElement;\n    const errorElement = inputGroup.querySelector('.errormsg')\n    errorElement.innerText = '';\n  }\nexport default f"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}